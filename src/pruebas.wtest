import modelo.*


	const recetaPasta = new Receta(ingredientes=['fideos','salsa','parmesano'], nivelDeDificultad = 1/3)
	
	const recetaPizza = new Receta(ingredientes=['masaMadre','salsa','queso&oregano'],nivelDeDificultad = 1/3)
	
	const recetaHamburguesa = new Receta(ingredientes=['discoDeCarne','pan','aderezoEspecial'],nivelDeDificultad = 1/3)
	
	const recetaPastaItaliana = new Receta(ingredientes=['spaguetti','pesto','parmesano'],nivelDeDificultad = 1/3)
	
	const recetaOjoDeBifeConPapas =  new Receta(ingredientes=['ojoDeBife','romero','papas','salMarina','ajo'],nivelDeDificultad = 1/5)
	
	
describe "TP integrador" {

	test "Un cocinero experimentado al preparar una receta que puede perfeccionar, la agrega a su lista de preparaciones con calidad superior" {
		
		//dadas 3 preparaciones iniciales, la experiencia acumulada del cocinero debe ser el triple de la experiencia que aporta una receta para que el cocinero la pueda perfeccionar
		
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
		
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado) 
		
		pedro.preparar(recetaPastaItaliana)

			assert.that(pedro.preparoReceta(recetaPastaItaliana) && pedro.preparaciones().find({comida=>comida.receta()==recetaPastaItaliana}).calidadComida()==superior)
		

	}

	test "Un chef al preparar una receta que puede perfeccionar, agrega la comida con un plus en su experiencia aportada" {
		
		//dadas 3 preparaciones iniciales, la experiencia acumulada del cocinero debe ser el triple de la experiencia que aporta una receta para que el cocinero la pueda perfeccionar
	
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
	
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal,hamburguesaNormal], nivelDeAprendizaje = chef) 	
	 	
	 	superior.configuracionPlus(pedro.cantPreparacionesSimilares(recetaOjoDeBifeConPapas)/10) //
	
		const experienciaQueAportaOjoDeBifeSuperior = chef.calculoPlus(pedro,recetaOjoDeBifeConPapas) + recetaOjoDeBifeConPapas.experienciaAportada()
	
		pedro.preparar(recetaOjoDeBifeConPapas)
	
			assert.equals(pedro.experienciaQueLeAporto(recetaOjoDeBifeConPapas),experienciaQueAportaOjoDeBifeSuperior)

	}		

	
	test "Un cocinero experimentado al preparar una receta que puede perfeccionar, agrega la comida con un plus en su experiencia aportada" {
		//dadas 3 preparaciones iniciales, la experiencia acumulada del cocinero debe ser el triple de la experiencia que aporta una receta para que el cocinero la pueda perfeccionar
	
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
	
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado)

		superior.configuracionPlus(pedro.cantPreparacionesSimilares(recetaPastaItaliana)/10)
		
		const experienciaQueAportaPastaItaliana = experimentado.calculoPlus(pedro,recetaPastaItaliana) + recetaPastaItaliana.experienciaAportada()
		
		pedro.preparar(recetaPastaItaliana)
	
			assert.equals(pedro.experienciaQueLeAporto(recetaPastaItaliana),experienciaQueAportaPastaItaliana)

	}	
	
	test "Dado un chef con 2 preparaciones distintas que puede perfeccionar, cada preparacion perfeccionada tiene asignado la experienciaQueLeAporto correspondiente" {
		
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
	
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal,hamburguesaNormal], nivelDeAprendizaje = chef) 	
		
		superior.configuracionPlus(pedro.cantPreparacionesSimilares(recetaOjoDeBifeConPapas)/10)
		
		const experienciaQueAportaOjoDeBifeSuperior = chef.calculoPlus(pedro,recetaOjoDeBifeConPapas) + recetaOjoDeBifeConPapas.experienciaAportada()
	
		pedro.preparar(recetaOjoDeBifeConPapas)
		
		const recetaPastaItaliana = new Receta(ingredientes=['spaguetti','pesto','parmesano'], nivelDeDificultad= (3* recetaOjoDeBifeConPapas.experienciaAportada() + experienciaQueAportaOjoDeBifeSuperior)/3)
		
		superior.configuracionPlus(pedro.cantPreparacionesSimilares(recetaPastaItaliana)/10)
		
		const experienciaQueAportaPastaItalianaSuperior = chef.calculoPlus(pedro,recetaPastaItaliana) + recetaPastaItaliana.experienciaAportada()
		
		pedro.preparar(recetaPastaItaliana)
		
			assert.that(pedro.experienciaQueLeAporto(recetaOjoDeBifeConPapas)==experienciaQueAportaOjoDeBifeSuperior && pedro.experienciaQueLeAporto(recetaPastaItaliana)==experienciaQueAportaPastaItalianaSuperior)
	}
	
//// Punto-4

	test "Las Recetas Gourmet aportan el doble de experiencia que el resto de recetas"{
		
		const recetaPastaGourmet = new RecetaGourmet(ingredientes=['fideos','salsa','parmesano'], nivelDeDificultad = 1/3)	
		
		assert.equals(recetaPasta.experienciaAportada() * 3, recetaPastaGourmet.experienciaAportada())	
	}

	test "Las Recetas Gourmet siempre son dificiles"{
		
		const recetaPastaItalianaGourmet = new RecetaGourmet(ingredientes=['spaguetti','pesto','parmesano'],nivelDeDificultad = 1/3)
		
		assert.that(recetaPastaItalianaGourmet.esDificil())
		
	}
	
/// Punto-5
	test "Cuando la Academia de Cocina entrena  a sus estudiantes, cada estudiante prepara la receta que más experiencia le aporta de aquellas que puede preparar del Recetario disponible"{
		
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
		
		
		const juan = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado)
		const luis = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado)
		const nicolas = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = chef)
		const lucas = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = chef)		
		
		const recetarioA = [recetaPasta, recetaPizza, recetaHamburguesa, recetaPastaItaliana, recetaOjoDeBifeConPapas]
		academia.recetario(recetarioA)
		
		const recetaQueMasLeAportaAjuan = juan.laRecetaQueMasExperienciaLeAporta(recetarioA)
		const recetaQueMasLeAportaAluis = luis.laRecetaQueMasExperienciaLeAporta(recetarioA)
		const recetaQueMasLeAportaAnicolas = nicolas.laRecetaQueMasExperienciaLeAporta(recetarioA)
		const recetaQueMasLeAportaAlucas = lucas.laRecetaQueMasExperienciaLeAporta(recetarioA)
		
		const estudiantesA = [juan, luis, nicolas, lucas]
		academia.estudiantes(estudiantesA)
		
		academia.entrenarEstudiantes()
		
		//las preparaciones son una lista de comidas. Como estan ordenadas, verifico que la ultima comida tenga la receta que mas experiencia le aporta al cocinero
		assert.equals(juan.preparaciones().last().receta(),recetaQueMasLeAportaAjuan)
		assert.equals(luis.preparaciones().last().receta(),recetaQueMasLeAportaAluis)
		assert.equals(nicolas.preparaciones().last().receta(),recetaQueMasLeAportaAnicolas)
		assert.equals(lucas.preparaciones().last().receta(),recetaQueMasLeAportaAlucas)

	}



	test "Test sobre el calculo del nivelExperiencia() de un cocinero. Se ponen a prueba comidas con calidad normal y superior + configuracion del plus" {
		
			/*Por ejemplo, si el cocinero sólo preparó una comida con calidad normal cuya receta tiene 3
			ingredientes y dificultad 2, y otra comida con la misma receta pero calidad superior y un plus de
			10 puntos, su experiencia debería ser 3*2 + (3*2 + 10) ⇒ 22. */
			
			
		const recetaSandwich = new Receta(ingredientes=['jamon', 'queso','baguette'] ,nivelDeDificultad = 2)	
		
		const sandwichNormal = new Comida(receta=recetaSandwich, calidadComida=normal)
		
		const sandwichSuperior = new Comida(receta=recetaSandwich,calidadComida=superior)
		
		sandwichSuperior.plus(10)
		
		const pedro = new Cocinero(preparaciones = [sandwichNormal,sandwichSuperior],nivelDeAprendizaje = principiante)

		assert.that(pedro.nivelDeExperiencia()==22)

	}
	

	test "Test sobre la capacidad de configurar la experienciaMax aportada por una comida de calidad pobre" {
		
			/*Si también hubiese preparado dos comidas con esa misma receta pero con calidad pobre, y se
			configura que como máximo las comidas pobres den 4 puntos de experiencia, la experiencia
			adquirida por el cocinero sería 3*2 + (3*2 + 10) + 4 + 4 ⇒ 30. Si luego se decidiera ajustar ese
			valor máximo a 7 puntos, su experiencia sería 3*2 + (3*2 + 10) + 3*2 + 3*2 ⇒ 34 */
			
			//para hacer lo que pide la consigna --> cada comida si es superior, se le asigna un plus distinto de cero. La propia comida calcula el nivelDeExperiencia aportado de cada comida llamando calidad.calculo(receta,plus)

		const recetaSandwich = new Receta(ingredientes=['jamon', 'queso','baguette'] ,nivelDeDificultad = 2)	
		
		const sandwichNormal = new Comida(receta=recetaSandwich, calidadComida=normal)
		
		const sandwichSuperior = new Comida(receta=recetaSandwich,calidadComida=superior)
		
		sandwichSuperior.plus(10)
		
		const sandwichPobre = new Comida(receta=recetaSandwich, calidadComida=pobre) 
		
		const otroSandwichPobre = new Comida(receta=recetaSandwich,calidadComida=pobre) 
			
		
		const pedro = new Cocinero(preparaciones = [sandwichNormal,sandwichSuperior,sandwichPobre,otroSandwichPobre],nivelDeAprendizaje = principiante)	
		
		const experienciaDePedroSinConfigurarExpMax = pedro.nivelDeExperiencia()	
		
		configurarCalidadPobre.experienciaMax(4)
		
		const experienciaDePedroCuandoExpMaxDeCalidadPobreEs4 = pedro.nivelDeExperiencia()
		
		configurarCalidadPobre.experienciaMax(7)
		
		const experienciaDePedroCuandoExpMaxDeCalidadPobreEs7 = pedro.nivelDeExperiencia()
		
		configurarCalidadPobre.experienciaMax(0)
		
		const experienciaDePedroCuandoExpMaxDeCalidadPobreEs0 = pedro.nivelDeExperiencia()			
			
		assert.that(experienciaDePedroSinConfigurarExpMax == 22 && experienciaDePedroCuandoExpMaxDeCalidadPobreEs4==30 && experienciaDePedroCuandoExpMaxDeCalidadPobreEs7==34 && experienciaDePedroCuandoExpMaxDeCalidadPobreEs0==22)

	}
	test "testXx" {
		

		assert.fail("Falta implementar")


	}
}