import modelo.*


	const recetaPasta = new Receta(ingredientes=['fideos','salsa','parmesano'], nivelDeDificultad = 1/3)
	
	const recetaPizza = new Receta(ingredientes=['masaMadre','salsa','queso&oregano'],nivelDeDificultad = 1/3)
	
	const recetaHamburguesa = new Receta(ingredientes=['discoDeCarne','pan','aderezoEspecial'],nivelDeDificultad = 1/3)
	
	const recetaPastaItaliana = new Receta(ingredientes=['spaguetti','pesto','parmesano'],nivelDeDificultad = 1/3)
	
	const recetaOjoDeBifeConPapas =  new Receta(ingredientes=['ojoDeBife','romero','papas','salMarina','ajo'],nivelDeDificultad = 1/5)
	
	object fabrica{
		method cocineroPrincipiante()= new Cocinero(nivelDeAprendizaje = principiante)
		
		method cocineroExperimentado()= new Cocinero(nivelDeAprendizaje = experimentado)
		
		method cocineroChef()= new Cocinero(nivelDeAprendizaje = chef)
		
		method recetaSimilarIngredientes(receta) = new Receta(ingredientes = receta.ingredientes(), nivelDeDificultad= 1)
		
		method recetaSimilarDificultad(receta) = new Receta(ingredientes = ['spaguetti'], nivelDeDificultad= receta.nivelDeDificultad())
		
		method recetaDificil()= new Receta(ingredientes = ['spaguetti', 'oregano'], nivelDeDificultad = 6)
		
		method comidaNormal(receta) = new Comida(receta=receta, calidadComida = normal)
		
		method comidaPobre(receta) = new Comida(receta=receta, calidadComida = pobre)
		
		method comidaSuperior(receta) = new Comida(receta=receta, calidadComida =new Superior(configuracionPlus=0))
		
		method recetaFacil() = new Receta(ingredientes= ['oregano', 'carne'], nivelDeDificultad = 4)
		
	}
	
	
describe "TP integrador" {
	
	test "la experiencia de un cocinero es la suma de experiencia que le aportan las comidas que preparo"{
		
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=new Superior(configuracionPlus=10))
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=pobre)
		pobre.experienciaMax(5)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
		
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado) 
		
		assert.equals(pedro.nivelDeExperiencia(), 13)
		
	}
	

	test "Un cocinero experimentado al preparar una receta que puede perfeccionar, la agrega a su lista de preparaciones con calidad superior" {
		
		//dadas 3 preparaciones iniciales, la experiencia acumulada del cocinero debe ser el triple de la experiencia que aporta una receta para que el cocinero la pueda perfeccionar
		
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
		
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado) 
		
		assert.that(pedro.perfeccionar(recetaPastaItaliana))
		
		const  plus = pedro.cantPreparacionesSimilares(recetaPastaItaliana)/10
		
		pedro.preparar(recetaPastaItaliana)

		//si la calidad es superior, se puede comprobar la experiencia aportada por la comida 
		
		const experienciaReceta = recetaPastaItaliana.experienciaAportada()
		
		const experienciaComida = experienciaReceta + plus
		
			assert.that(pedro.preparoReceta(recetaPastaItaliana))
			assert.equals(pedro.preparaciones().find({comida=>comida.receta()==recetaPastaItaliana}).experienciaQueAporta(),experienciaComida)
		

	}

	test "Un chef al preparar una receta que puede perfeccionar, agrega la comida a su lista de preparaciones con un plus en su experiencia aportada" {
		
		//dadas 3 preparaciones iniciales, la experiencia acumulada del cocinero debe ser el triple de la experiencia que aporta una receta para que el cocinero la pueda perfeccionar
	
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
	
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal,hamburguesaNormal], nivelDeAprendizaje = chef) 	
	
		const experienciaQueAportaOjoDeBifeSuperior = chef.calculoPlus(pedro,recetaOjoDeBifeConPapas) + recetaOjoDeBifeConPapas.experienciaAportada()
	
		pedro.preparar(recetaOjoDeBifeConPapas)
	
			assert.equals(pedro.experienciaQueLeAporto(recetaOjoDeBifeConPapas),experienciaQueAportaOjoDeBifeSuperior)

	}		

	
	test "Un cocinero experimentado al preparar una receta que puede perfeccionar, agrega la comida con un plus en su experiencia aportada" {
		
		//dadas 3 preparaciones iniciales, la experiencia acumulada del cocinero debe ser el triple de la experiencia que aporta una receta para que el cocinero la pueda perfeccionar
	
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
	
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado)

		//superior.configuracionPlus(pedro.cantPreparacionesSimilares(recetaPastaItaliana)/10)
		
		const experienciaQueAportaPastaItaliana = experimentado.calculoPlus(pedro,recetaPastaItaliana) + recetaPastaItaliana.experienciaAportada()
		
		pedro.preparar(recetaPastaItaliana)
	
			assert.equals(pedro.experienciaQueLeAporto(recetaPastaItaliana),experienciaQueAportaPastaItaliana)

	}	
	
	test "Dado un chef con 2 preparaciones distintas que puede perfeccionar, cada preparacion perfeccionada tiene asignado la experienciaQueLeAporto correspondiente" {
		
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
	
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)
	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
	
		const pedro = new Cocinero(preparaciones = [pastaNormal, pizzaNormal,hamburguesaNormal], nivelDeAprendizaje = chef) 	
		
		//superior.configuracionPlus(pedro.cantPreparacionesSimilares(recetaOjoDeBifeConPapas)/10)
		
		const experienciaQueAportaOjoDeBifeSuperior = chef.calculoPlus(pedro,recetaOjoDeBifeConPapas) + recetaOjoDeBifeConPapas.experienciaAportada()
	
		pedro.preparar(recetaOjoDeBifeConPapas)
		
		const recetaPastaItaliana = new Receta(ingredientes=['spaguetti','pesto','parmesano'], nivelDeDificultad= (3* recetaOjoDeBifeConPapas.experienciaAportada() + experienciaQueAportaOjoDeBifeSuperior)/3)
		
		//superior.configuracionPlus(pedro.cantPreparacionesSimilares(recetaPastaItaliana)/10)
		
		const experienciaQueAportaPastaItalianaSuperior = chef.calculoPlus(pedro,recetaPastaItaliana) + recetaPastaItaliana.experienciaAportada()
		
		pedro.preparar(recetaPastaItaliana)
		
			assert.that(pedro.experienciaQueLeAporto(recetaOjoDeBifeConPapas)==experienciaQueAportaOjoDeBifeSuperior && pedro.experienciaQueLeAporto(recetaPastaItaliana)==experienciaQueAportaPastaItalianaSuperior)
	}
	
//// Punto-4

	test "Las Recetas Gourmet aportan el doble de experiencia que el resto de recetas"{
		
		const recetaPastaGourmet = new RecetaGourmet(ingredientes=['fideos','salsa','parmesano'], nivelDeDificultad = 1/3)	
		
		assert.equals(recetaPasta.experienciaAportada() * 3, recetaPastaGourmet.experienciaAportada())	
	}

	test "Las Recetas Gourmet siempre son dificiles"{
		
		const recetaPastaItalianaGourmet = new RecetaGourmet(ingredientes=['spaguetti','pesto','parmesano'],nivelDeDificultad = 1/3)
		
		assert.that(recetaPastaItalianaGourmet.esDificil())
		
	}
	
/// Punto-5
	test "Cuando la Academia de Cocina entrena  a sus estudiantes, cada estudiante prepara la receta que más experiencia le aporta de aquellas que puede preparar del Recetario disponible"{
		
		const pastaNormal = new Comida(receta=recetaPasta, calidadComida=normal)
		const pizzaNormal = new Comida(receta=recetaPizza, calidadComida=normal)	
		const hamburguesaNormal = new Comida(receta=recetaHamburguesa, calidadComida=normal)
		
		
		const juan = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado)
		const luis = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = experimentado)
		const nicolas = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = chef)
		const lucas = new Cocinero(preparaciones = [pastaNormal, pizzaNormal, hamburguesaNormal], nivelDeAprendizaje = chef)		
		
		const recetarioA = [recetaPasta, recetaPizza, recetaHamburguesa, recetaPastaItaliana, recetaOjoDeBifeConPapas]
		academia.recetario(recetarioA)
		
		const recetaQueMasLeAportaAjuan = juan.laRecetaQueMasExperienciaLeAporta(recetarioA)
		const recetaQueMasLeAportaAluis = luis.laRecetaQueMasExperienciaLeAporta(recetarioA)
		const recetaQueMasLeAportaAnicolas = nicolas.laRecetaQueMasExperienciaLeAporta(recetarioA)
		const recetaQueMasLeAportaAlucas = lucas.laRecetaQueMasExperienciaLeAporta(recetarioA)
		
		const estudiantesA = [nicolas, lucas]
		academia.estudiantes(estudiantesA)
		
		academia.entrenarEstudiantes()
		
		//las preparaciones son una lista de comidas. Como estan ordenadas, verifico que la ultima comida tenga la receta que mas experiencia le aporta al cocinero
		//assert.equals(juan.preparaciones().last().receta(),recetaQueMasLeAportaAjuan)
		//assert.equals(luis.preparaciones().last().receta(),recetaQueMasLeAportaAluis)
		assert.equals(nicolas.preparaciones().last().receta(),recetaQueMasLeAportaAnicolas)
		assert.equals(lucas.preparaciones().last().receta(),recetaQueMasLeAportaAlucas)

	}



	test "Dado un cocinero que preparó dos recetas iguales pero una con calidad normal y otra con superior y plus = 10, se calcula correctamente el nivel de experiencia del cocinero" {
		
			/*Por ejemplo, si el cocinero sólo preparó una comida con calidad normal cuya receta tiene 3
			ingredientes y dificultad 2, y otra comida con la misma receta pero calidad superior y un plus de
			10 puntos, su experiencia debería ser 3*2 + (3*2 + 10) ⇒ 22. */
			
			
		const recetaSandwich = new Receta(ingredientes=['jamon', 'queso','baguette'] ,nivelDeDificultad = 2)	
		
		const sandwichNormal = new Comida(receta=recetaSandwich, calidadComida=normal)
		
		const sandwichSuperior = new Comida(receta=recetaSandwich,calidadComida=new Superior(configuracionPlus=10))
		
		//sandwichSuperior.plus(10)
		
		const pedro = new Cocinero(preparaciones = [sandwichNormal,sandwichSuperior],nivelDeAprendizaje = principiante)

		assert.that(pedro.nivelDeExperiencia()==22)

	}
	

	test "Dado un cocinero con una lista de preparaciones pobres, su nivel de experiencia varía según la configuracion de la experiencia maxima que aportan, en general, las comidas pobres" {
		
			//Si también hubiese preparado dos comidas con esa misma receta pero con calidad pobre, y se
			//configura que como máximo las comidas pobres den 4 puntos de experiencia, la experiencia
			//adquirida por el cocinero sería 3*2 + (3*2 + 10) + 4 + 4 ⇒ 30. Si luego se decidiera ajustar ese
			//valor máximo a 7 puntos, su experiencia sería 3*2 + (3*2 + 10) + 3*2 + 3*2 ⇒ 34 

		const recetaSandwich = new Receta(ingredientes=['jamon', 'queso','baguette'] ,nivelDeDificultad = 2)	
		
		const sandwichNormal = new Comida(receta=recetaSandwich, calidadComida=normal)
		
		const sandwichSuperior = new Comida(receta=recetaSandwich,calidadComida=new Superior(configuracionPlus=10))
		
		//sandwichSuperior.plus(10)
		
		const sandwichPobre = new Comida(receta=recetaSandwich, calidadComida=pobre) 
		
		const otroSandwichPobre = new Comida(receta=recetaSandwich,calidadComida=pobre) 
			
		
		const pedro = new Cocinero(preparaciones = [sandwichNormal,sandwichSuperior,sandwichPobre,otroSandwichPobre],nivelDeAprendizaje = principiante)	
		
		const experienciaDePedroSinConfigurarExpMax = pedro.nivelDeExperiencia()	
		
		pobre.experienciaMax(4)
		
		const experienciaDePedroCuandoExpMaxDeCalidadPobreEs4 = pedro.nivelDeExperiencia()
		
		pobre.experienciaMax(7)
		
		const experienciaDePedroCuandoExpMaxDeCalidadPobreEs7 = pedro.nivelDeExperiencia()
		
		pobre.experienciaMax(0)
		
		const experienciaDePedroCuandoExpMaxDeCalidadPobreEs0 = pedro.nivelDeExperiencia()			
			
		
		assert.equals(experienciaDePedroSinConfigurarExpMax,22)
		assert.equals(experienciaDePedroCuandoExpMaxDeCalidadPobreEs4,30)
		assert.equals(experienciaDePedroCuandoExpMaxDeCalidadPobreEs7,34)
		assert.equals(experienciaDePedroCuandoExpMaxDeCalidadPobreEs0,22)
		
	}
	
		test "Un cocinero principiante con un nivel de experiencia de 101, pasa de nivel a experimentado" {
		
		const pizzaSuperior1 = new Comida (receta = recetaPizza, calidadComida = new Superior(configuracionPlus=49))
		//pizzaSuperior1.plus(49)
		
		const pizzaSuperior2 = new Comida (receta = recetaPizza, calidadComida =  new Superior(configuracionPlus=49))
		//pizzaSuperior2.plus(49)
		
		const pedro = new Cocinero(preparaciones = [pizzaSuperior1, pizzaSuperior2], nivelDeAprendizaje = principiante)
		
		//pedro prepara otra pizza --> su nivel de experiencia supera los 100 --> pasa de nivel
		
		pedro.preparar(recetaPizza)
		
		assert.equals(pedro.nivelDeAprendizaje(), experimentado)


	}
	
		test "Un cocinero experimentado que preparó 6 comidas dificiles (con nivel de dificultad>5), pasa de nivel a chef" {
		
		const recetaDificil = new Receta (ingredientes=["ingrediente"],nivelDeDificultad = 6)
		
		const comidaDificil1 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil2 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil3 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil4 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil5 = new Comida (receta = recetaDificil ,calidadComida = normal)
		
		const pedro = new Cocinero (preparaciones = [comidaDificil1,comidaDificil2,comidaDificil3,comidaDificil4,comidaDificil5], nivelDeAprendizaje = experimentado)
		
		pedro.preparar(recetaDificil)

		assert.equals(pedro.nivelDeAprendizaje(), chef)


	}
	test "si un estudiante de la academia no puede preparar ninguna receta, falla el metodo entrenarEstudiantes" {
		
	const recetaDificil = new Receta (ingredientes=["ingrediente"],nivelDeDificultad = 6)
		
		const comidaDificil1 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil2 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil3 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil4 = new Comida (receta = recetaDificil ,calidadComida = normal)
		const comidaDificil5 = new Comida (receta = recetaDificil ,calidadComida = normal)
		
		const pedro = new Cocinero (preparaciones = [comidaDificil1,comidaDificil2,comidaDificil3,comidaDificil4,comidaDificil5], nivelDeAprendizaje = chef)
		const simon = new Cocinero (preparaciones = [comidaDificil1,comidaDificil2,comidaDificil3,comidaDificil4,comidaDificil5], nivelDeAprendizaje = principiante)
		
		const recetario = [recetaDificil]
		
		academia.agregarEstudiante(pedro)
		academia.agregarEstudiante(simon)
		academia.recetario(recetario)
		
		assert.throwsException({academia.entrenarEstudiantes()})
	


	}
	
	test "un principiante no puede preparar una receta dificil"
	{
		const recetaDificil = new Receta (ingredientes=["ingrediente"],nivelDeDificultad = 6)

		const pedro = new Cocinero (nivelDeAprendizaje = principiante)
		
		assert.throwsExceptionWithType(
			new PreparacionFallida(), {pedro.preparar(recetaDificil)}
		)
	}
	
	test "un experimentado puede preparar una receta si realizo una similar"
	{
		const messi = fabrica.cocineroExperimentado()
		const recetaFacil = fabrica.recetaFacil()
		const comidaFacil = fabrica.comidaPobre(recetaFacil)
		messi.preparaciones([comidaFacil])
		
		const recetaSimilar = fabrica.recetaSimilarIngredientes(recetaFacil)
		
		assert.that(experimentado.puedePreparar(recetaSimilar, messi))
	}
}